import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../config/app_config.dart';
import '../providers/auth_provider.dart';
import 'package:http/http.dart' as http;

class ApiTestScreen extends StatefulWidget {
  const ApiTestScreen({super.key});

  @override
  State<ApiTestScreen> createState() => _ApiTestScreenState();
}

class _ApiTestScreenState extends State<ApiTestScreen> {
  final TextEditingController _emailController =
      TextEditingController(text: 'test@example.com');
  final TextEditingController _passwordController =
      TextEditingController(text: 'test123');
  final TextEditingController _customUrlController = TextEditingController();

  String _responseText = '';
  bool _isLoading = false;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _customUrlController.dispose();
    super.dispose();
  }

  Future<void> _testLogin() async {
    setState(() {
      _isLoading = true;
      _responseText = 'üîÑ Probando login...\n\n';
    });

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final success = await authProvider.login(
        _emailController.text,
        _passwordController.text,
      );

      setState(() {
        _responseText +=
            success ? '‚úÖ Login exitoso!\n\n' : '‚ùå Login fallido\n\n';
        _responseText +=
            'Mensaje: ${authProvider.errorMessage ?? "Sin mensaje de error"}\n\n';
        if (authProvider.currentUser != null) {
          _responseText += 'üë§ Usuario: ${authProvider.currentUser!.name}\n';
          _responseText += 'üìß Email: ${authProvider.currentUser!.email}\n';
          _responseText += 'üÜî ID: ${authProvider.currentUser!.id}\n';
        }
      });
    } catch (e) {
      setState(() {
        _responseText += '‚ùå Error: $e\n';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _testConnectivity() async {
    setState(() {
      _isLoading = true;
      _responseText = 'üîÑ Probando conectividad...\n\n';
    });

    try {
      final url = Uri.parse(AppConfig.baseUrl);
      _responseText += 'üåê Probando conexi√≥n a: ${AppConfig.baseUrl}\n\n';

      final startTime = DateTime.now();
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      final endTime = DateTime.now();
      final duration = endTime.difference(startTime);

      setState(() {
        _responseText += '‚úÖ Conexi√≥n exitosa!\n';
        _responseText += '‚è±Ô∏è Tiempo: ${duration.inMilliseconds}ms\n';
        _responseText += 'üìä Status: ${response.statusCode}\n';
      });
    } catch (e) {
      setState(() {
        _responseText += '‚ùå Error de conectividad: $e\n';
        _responseText += '\nüí° Posibles causas:\n';
        _responseText += '  ‚Ä¢ El servidor no est√° ejecut√°ndose\n';
        _responseText += '  ‚Ä¢ La IP ${AppConfig.baseUrl} no es accesible\n';
        _responseText += '  ‚Ä¢ Problemas de red o firewall\n';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _clearResponse() {
    setState(() {
      _responseText = '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üß™ Pruebas de API'),
        backgroundColor: const Color(0xFF4285F4),
        actions: [
          IconButton(
            icon: const Icon(Icons.clear),
            onPressed: _clearResponse,
            tooltip: 'Limpiar respuesta',
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Informaci√≥n de configuraci√≥n
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '‚öôÔ∏è Configuraci√≥n Actual',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    Text('üåê Base URL: ${AppConfig.baseUrl}'),
                    Text('üîë Login URL: ${AppConfig.loginUrl}'),
                    Text('‚è±Ô∏è Timeout: ${AppConfig.apiTimeout.inSeconds}s'),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Campos de entrada
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'üìù Datos de Prueba (Modo Testing)',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'üí° Emails con "test" o "admin" hacen login autom√°tico',
                      style: TextStyle(fontSize: 12, color: Colors.green),
                    ),
                    const SizedBox(height: 16),
                    TextField(
                      controller: _emailController,
                      decoration: const InputDecoration(
                        labelText: 'Email',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: _passwordController,
                      decoration: const InputDecoration(
                        labelText: 'Contrase√±a (opcional)',
                        border: OutlineInputBorder(),
                      ),
                      obscureText: true,
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Botones de prueba
            const Text(
              'üß™ Pruebas Disponibles',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),

            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _testConnectivity,
                  icon: const Icon(Icons.wifi),
                  label: const Text('Conectividad'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _testLogin,
                  icon: const Icon(Icons.login),
                  label: const Text('Login Testing'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.purple,
                  ),
                ),
              ],
            ),

            const SizedBox(height: 20),

            // Indicador de carga
            if (_isLoading)
              const Center(
                child: Padding(
                  padding: EdgeInsets.all(16),
                  child: CircularProgressIndicator(),
                ),
              ),

            // √Årea de respuesta
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'üìÑ Respuesta',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 12),
                    Container(
                      width: double.infinity,
                      height: 300,
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.grey[300]!),
                      ),
                      child: SingleChildScrollView(
                        child: SelectableText(
                          _responseText.isEmpty
                              ? 'üëÜ Selecciona una prueba para ver la respuesta aqu√≠'
                              : _responseText,
                          style: const TextStyle(
                            fontFamily: 'monospace',
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Informaci√≥n de ayuda
            Card(
              color: Colors.blue[50],
              child: const Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üí° Modo Testing Activado',
                      style:
                          TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    Text(
                        '‚Ä¢ Cualquier email con "test" o "admin" hace login autom√°tico'),
                    Text('‚Ä¢ No requiere contrase√±a ni servidor API'),
                    Text('‚Ä¢ Perfecto para probar la UI sin backend'),
                    Text(
                        '‚Ä¢ Una vez que tu API est√© lista, quita el modo testing'),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
